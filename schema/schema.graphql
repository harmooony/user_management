scalar DateTime

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  role: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
  role: String
}

input UserFilter {
  name: String
  email: String
  role: String
}

type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  listUsers(filter: UserFilter, limit: Int, offset: Int): [User!]!
  getUser(id: ID!): User
  me: User
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  login(email: String!, password: String!): AuthPayload!
}